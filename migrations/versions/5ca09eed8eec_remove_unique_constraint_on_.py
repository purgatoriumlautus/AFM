from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = '5ca09eed8eec'
down_revision = '6d420c53bf2a'
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind)
    unique_constraints = [uc['name'] for uc in inspector.get_unique_constraints('organisations')]

    if 'unique_organisation_id' in unique_constraints:
        with op.batch_alter_table('organisations', schema=None) as batch_op:
            batch_op.drop_constraint('unique_organisation_id', type_='unique')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint('unique_owner_organisation', type_='unique')
        batch_op.drop_constraint('unique_owner_organization', type_='unique')
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_unique_constraint('unique_owner_organization', ['organisation_id', 'is_owner'])
        batch_op.create_unique_constraint('unique_owner_organisation', ['organisation_id', 'is_owner'])

    with op.batch_alter_table('organisations', schema=None) as batch_op:
        batch_op.create_unique_constraint('unique_organisation_id', ['id'])
    # ### end Alembic commands ###