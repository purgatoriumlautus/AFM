from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = 'c6f288c1b7de'
down_revision = '6afd2303c149'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:


        # Drop the 'is_superadmin' column if it exists
        bind = op.get_bind()
        inspector = Inspector.from_engine(bind)
        if 'is_superadmin' in [column['name'] for column in inspector.get_columns('users')]:
            batch_op.drop_column('is_superadmin')



    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:


        # Add the 'is_superadmin' column back if it doesn't exist
        bind = op.get_bind()
        inspector = Inspector.from_engine(bind)
        if 'is_superadmin' not in [column['name'] for column in inspector.get_columns('users')]:
            batch_op.add_column(sa.Column('is_superadmin', sa.BOOLEAN(), autoincrement=False, nullable=True))


    # ### end Alembic commands ###
